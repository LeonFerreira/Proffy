// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Proffy.CourseMicroservice.Infrastructure.DataAccess.Contexts;

namespace Proffy.CourseMicroservice.Infrastructure.DataAccess.Migrations
{
    [DbContext(typeof(CourseContext))]
    partial class CourseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0-preview.8.20407.4");

            modelBuilder.Entity("Proffy.CourseMicroservice.Domain.AggregatesModel.CourseAggregate.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Actived")
                        .HasMaxLength(50)
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Proffy.CourseMicroservice.Domain.AggregatesModel.CourseAggregate.TeacherCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Actived")
                        .HasColumnType("bit");

                    b.Property<string>("Cost")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("TeacherCourses");
                });

            modelBuilder.Entity("Proffy.CourseMicroservice.Domain.AggregatesModel.CourseAggregate.TeacherCourseSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("From")
                        .HasColumnType("int");

                    b.Property<Guid>("TeacherCourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("To")
                        .HasColumnType("int");

                    b.Property<int>("WeekDay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeacherCourseId");

                    b.ToTable("TeacherCourseSchedules");
                });

            modelBuilder.Entity("Proffy.CourseMicroservice.Domain.AggregatesModel.CourseAggregate.TeacherCourse", b =>
                {
                    b.HasOne("Proffy.CourseMicroservice.Domain.AggregatesModel.CourseAggregate.Course", "Course")
                        .WithMany("TeacherCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Proffy.CourseMicroservice.Domain.AggregatesModel.CourseAggregate.TeacherCourseSchedule", b =>
                {
                    b.HasOne("Proffy.CourseMicroservice.Domain.AggregatesModel.CourseAggregate.TeacherCourse", "TeacherCourse")
                        .WithMany("TeacherCourseSchedules")
                        .HasForeignKey("TeacherCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
